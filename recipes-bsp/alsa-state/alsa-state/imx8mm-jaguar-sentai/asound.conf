defaults.pcm.rate_converter "samplerate_converter"
defaults.pcm.dmix.rate 48000
defaults.pcm.dmix.format "S32_LE"
defaults.pcm.dsnoop.rate 48000
defaults.pcm.dsnoop.format "S32_LE"

# Fallback device chain for robustness
pcm.spk_hw {
        type hw
        card tas2563audio
        device 0
        format S32_LE
        rate 48000
        channels 2
        buffer_size 4096
        period_size 1024
        periods 4
}

# spk represents the physical sink (playback) with fallback
pcm.spk
{
        type plug
        slave.pcm {
                type route
                slave.pcm {
                        @func refer
                        name {
                                @func concat
                                strings [
                                        "cards."
                                        {
                                                @func card_driver
                                                card tas2563audio
                                        }
                                        ".pcm.front.0:CARD=tas2563audio"
                                ]
                        }
                        @args [ CARD ]
                        @args.CARD {
                                type string
                                default "tas2563audio"
                        }
                }
                ttable.0.0 1
                ttable.1.1 1
        }
        hint {
                show on
                description "Speaker Output with fallback"
        }
}
                                                                                                                                                                              
# mic represents the physical source (capture) with fallback
pcm.mic_hw {
        type hw
        card micfilaudio
        device 0
        format S16_LE
        rate 48000
        channels 2
        buffer_size 4096
        period_size 1024
        periods 4
}

pcm.mic
{
        type plug
        slave.pcm "mic_hw"
        hint {
                show on
                description "Microphone Input with fallback"
        }
}                  
                                                                                                                                                                               
# Following two definitions define the Virtual Sink (playback) stream
# pwloop stands for playback write loopback
pcm.pwloop
{
        type hw
        card Loopback
        device 1
        subdevice 0
        buffer_size 8192
        period_size 2048
        periods 4
}

# prloop stands for playback read loopback
pcm.prloop
{
        type hw
        card Loopback
        device 0
        subdevice 0
        buffer_size 8192
        period_size 2048
        periods 4
}

# Following two definitions define the Virtual Source (capture) stream
# cwloop stands for capture write loopback
pcm.cwloop
{
        type hw
        card Loopback
        device 1
        subdevice 1
        buffer_size 8192
        period_size 2048
        periods 4
}

# crloop stands for capture read loopback
pcm.crloop
{
        type hw
        card Loopback
        device 0
        subdevice 1
        buffer_size 8192
        period_size 2048
        periods 4
}

# As multiple sources may play audio at the same time, we use the mix
# plugin. Otherwise only a single playback source would be allowed.
pcm.mix
{
        type dmix
        ipc_key 1001
        ipc_gid audio
        ipc_perm 0660
        slave {
                pcm "pwloop"
                format S32_LE
                rate 48000
                channels 2
                buffer_size 8192
                period_size 2048
                periods 4
        }
        bindings {
                0 0
                1 1
        }
        hint {
                show on
                description "Mixed playback for multiple applications"
        }
}

pcm.split
{
        type dsnoop
        ipc_key 1002
        ipc_gid audio
        ipc_perm 0660
        slave {
                pcm "crloop"
                format S32_LE
                rate 48000
                channels 2
                buffer_size 8192
                period_size 2048
                periods 4
        }
        bindings {
                0 0
                1 1
        }
        hint {
                show on
                description "Shared capture for multiple applications"
        }
}

pcm.softvol {
    type            softvol
    slave {
        pcm         "mix"      #redirect the output to dmix (instead of "hw:0,0")
    }
    control {
        name        "PCM"       #override the PCM slider to set the softvol volume level globally
        card        0
    }
    min_dB -51.0
    max_dB   0.0
}

# Applications like Alexa read/write from/to default stream.
# Unfortunately we can't have default capture stream and
# default playback stream. ALSA offers the asym plugin, which
# allows to define a default capture/playback stream as one
# device. The plug plugin is introduced for automatic sample
# rate and format conversion.
pcm.!default
{
        type asym
        playback.pcm "plug:softvol"
        capture.pcm "plug:split"
}