name: KAS Build CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'recipes-**'
      - 'conf/**'
      - 'kas/**'
      - 'scripts/**'
      - 'classes/**'
      - '.github/workflows/kas-build-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'recipes-**'
      - 'conf/**'
      - 'kas/**'
      - 'scripts/**'
      - 'classes/**'
      - '.github/workflows/kas-build-ci.yml'
  workflow_dispatch:
    inputs:
      machine:
        description: 'Specific machine to build (optional - builds all if not specified)'
        required: false
        type: choice
        options:
          - 'all'
          - 'imx8mm-jaguar-sentai'
          - 'imx8mm-jaguar-inst'
          - 'imx8mm-jaguar-phasora'
          - 'imx8mm-jaguar-handheld'
          - 'imx93-jaguar-eink'
          - 'imx93-11x11-lpddr4x-evk'
        default: 'all'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job to determine which machines to build
  setup:
    runs-on: ubuntu-latest
    outputs:
      machines: ${{ steps.machines.outputs.machines }}
      should_build: ${{ steps.changes.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, check if any relevant files changed
            if git diff --name-only origin/main...HEAD | grep -E '^(recipes-|conf/|kas/|scripts/|classes/)'; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine machines to build
        id: machines
        run: |
          if [ "${{ github.event.inputs.machine }}" != "" ] && [ "${{ github.event.inputs.machine }}" != "all" ]; then
            echo "machines=[\"${{ github.event.inputs.machine }}\"]" >> $GITHUB_OUTPUT
          else
            echo 'machines=["imx8mm-jaguar-sentai","imx8mm-jaguar-inst","imx8mm-jaguar-phasora","imx8mm-jaguar-handheld","imx93-jaguar-eink","imx93-11x11-lpddr4x-evk"]' >> $GITHUB_OUTPUT
          fi

  # Validation job - quick checks before expensive builds
  validate:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate KAS configurations
        run: |
          echo "🔍 Validating KAS configuration files..."
          
          # Check if required KAS files exist
          required_files=(
            "kas/lmp-dynamicdevices-base.yml"
            "kas/lmp-dynamicdevices-mfgtool.yml"
            "kas/base.yml"
            "kas/bsp.yml"
            "kas/dynamicdevices.yml"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required KAS file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

      - name: Validate machine configurations
        run: |
          echo "🔍 Validating machine configuration files..."
          
          machines='${{ needs.setup.outputs.machines }}'
          echo "Machines to validate: $machines"
          
          # Extract machine names from JSON array
          machine_list=$(echo "$machines" | jq -r '.[]')
          
          for machine in $machine_list; do
            conf_file="conf/machine/${machine}.conf"
            if [ ! -f "$conf_file" ]; then
              echo "❌ Missing machine config: $conf_file"
              exit 1
            else
              echo "✅ Found machine config: $conf_file"
            fi
          done

      - name: Lint scripts
        run: |
          echo "🔍 Linting shell scripts..."
          
          # Check if shellcheck is available
          if command -v shellcheck >/dev/null 2>&1; then
            find scripts/ -name "*.sh" -exec shellcheck {} +
          else
            echo "⚠️ shellcheck not available, skipping script linting"
          fi

  # Main build job with matrix strategy
  build:
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: needs.setup.outputs.should_build == 'true'
    strategy:
      fail-fast: false
      matrix:
        machine: ${{ fromJSON(needs.setup.outputs.machines) }}
        build_type: [base, mfgtool]
        exclude:
          # Only build mfgtool for i.MX93 machines
          - machine: imx8mm-jaguar-sentai
            build_type: mfgtool
          - machine: imx8mm-jaguar-inst
            build_type: mfgtool
          - machine: imx8mm-jaguar-phasora
            build_type: mfgtool
          - machine: imx8mm-jaguar-handheld
            build_type: mfgtool
    
    env:
      KAS_MACHINE: ${{ matrix.machine }}
      BUILD_TYPE: ${{ matrix.build_type }}
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          # Install kas-container
          curl -L https://raw.githubusercontent.com/siemens/kas/master/kas-container -o kas-container
          chmod +x kas-container
          sudo mv kas-container /usr/local/bin/

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/yocto/downloads
            ~/yocto/sstate
          key: yocto-cache-${{ matrix.machine }}-${{ matrix.build_type }}-${{ hashFiles('kas/**/*.yml', 'conf/**/*') }}
          restore-keys: |
            yocto-cache-${{ matrix.machine }}-${{ matrix.build_type }}-
            yocto-cache-${{ matrix.machine }}-
            yocto-cache-

      - name: Set up build environment
        run: |
          echo "🚀 Setting up build environment for ${{ matrix.machine }} (${{ matrix.build_type }})"
          
          # Create yocto cache directories
          mkdir -p ~/yocto/{downloads,sstate,persistent}
          chmod 755 ~/yocto/{downloads,sstate,persistent}
          
          # Set environment variables for build optimization
          echo "BB_NUMBER_THREADS=4" >> $GITHUB_ENV
          echo "PARALLEL_MAKE=-j4" >> $GITHUB_ENV
          
          # Disable interactive features
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          # For development builds, disable signing to avoid key issues
          echo "OPTEE_TA_SIGN_ENABLE=0" >> $GITHUB_ENV
          echo "SIGN_ENABLE=0" >> $GITHUB_ENV
          echo "UBOOT_SIGN_ENABLE=0" >> $GITHUB_ENV
          echo "UBOOT_SPL_SIGN_ENABLE=0" >> $GITHUB_ENV
          echo "TF_A_SIGN_ENABLE=0" >> $GITHUB_ENV
          echo "UEFI_SIGN_ENABLE=0" >> $GITHUB_ENV

      - name: Build with KAS
        timeout-minutes: 240  # 4 hour timeout
        run: |
          echo "🔨 Starting KAS build: ${{ matrix.machine }} (${{ matrix.build_type }})"
          
          # Select appropriate KAS configuration
          if [ "${{ matrix.build_type }}" = "mfgtool" ]; then
            kas_config="kas/lmp-dynamicdevices-mfgtool.yml"
          else
            kas_config="kas/lmp-dynamicdevices-base.yml"
          fi
          
          echo "Using KAS config: $kas_config"
          echo "Machine: $KAS_MACHINE"
          
          # Run KAS build with comprehensive logging
          kas-container \
            --runtime-args "-v ${HOME}/yocto:/var/cache \
                           -e KAS_MACHINE=$KAS_MACHINE \
                           -e BB_NUMBER_THREADS=$BB_NUMBER_THREADS \
                           -e PARALLEL_MAKE='$PARALLEL_MAKE' \
                           -e OPTEE_TA_SIGN_ENABLE=$OPTEE_TA_SIGN_ENABLE \
                           -e SIGN_ENABLE=$SIGN_ENABLE \
                           -e UBOOT_SIGN_ENABLE=$UBOOT_SIGN_ENABLE \
                           -e UBOOT_SPL_SIGN_ENABLE=$UBOOT_SPL_SIGN_ENABLE \
                           -e TF_A_SIGN_ENABLE=$TF_A_SIGN_ENABLE \
                           -e UEFI_SIGN_ENABLE=$UEFI_SIGN_ENABLE" \
            build "$kas_config"

      - name: Collect build artifacts
        if: always()
        run: |
          echo "📦 Collecting build artifacts for ${{ matrix.machine }} (${{ matrix.build_type }})"
          
          # Create artifacts directory
          mkdir -p artifacts/${{ matrix.machine }}/${{ matrix.build_type }}
          
          # Define deploy directory
          deploy_dir="$HOME/yocto/persistent/build/tmp/deploy/images/${{ matrix.machine }}"
          
          if [ -d "$deploy_dir" ]; then
            echo "✅ Deploy directory found: $deploy_dir"
            
            # Copy key artifacts
            artifacts=(
              "*.wic.gz"
              "*.wic.bmap"
              "imx-boot-*"
              "u-boot-*.itb"
              "*.dtb"
            )
            
            for pattern in "${artifacts[@]}"; do
              if ls "$deploy_dir"/$pattern 1> /dev/null 2>&1; then
                cp "$deploy_dir"/$pattern artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/
                echo "📁 Copied: $pattern"
              fi
            done
            
            # Create artifact summary
            echo "# Build Artifacts for ${{ matrix.machine }} (${{ matrix.build_type }})" > artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/README.md
            echo "Generated on: $(date)" >> artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/README.md
            echo "Commit: ${{ github.sha }}" >> artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/README.md
            echo "" >> artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/README.md
            echo "## Files:" >> artifacts/${{ matrix.machine }}/${{ matrix.build_type }}/README.md
            
            cd artifacts/${{ matrix.machine }}/${{ matrix.build_type }}
            for file in *; do
              if [ "$file" != "README.md" ]; then
                size=$(du -h "$file" | cut -f1)
                echo "- $file ($size)" >> README.md
              fi
            done
            cd ../../../
            
          else
            echo "❌ Deploy directory not found: $deploy_dir"
            echo "Available directories:"
            ls -la "$HOME/yocto/persistent/build/tmp/deploy/" || echo "No deploy directory found"
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.machine }}-${{ matrix.build_type }}
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

      - name: Generate build report
        if: always()
        run: |
          echo "📊 Generating build report"
          
          # Create build report
          cat > build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md << EOF
          # Build Report: ${{ matrix.machine }} (${{ matrix.build_type }})
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_number }}
          
          ## Build Configuration
          - **Machine:** ${{ matrix.machine }}
          - **Build Type:** ${{ matrix.build_type }}
          - **KAS Configuration:** $([ "${{ matrix.build_type }}" = "mfgtool" ] && echo "kas/lmp-dynamicdevices-mfgtool.yml" || echo "kas/lmp-dynamicdevices-base.yml")
          
          ## Build Status
          - **Status:** ${{ job.status }}
          - **Duration:** \$(expr \$SECONDS / 60) minutes
          
          ## Build Environment
          - **Runner:** ubuntu-latest
          - **Parallel Jobs:** \$BB_NUMBER_THREADS
          - **Make Jobs:** \$PARALLEL_MAKE
          
          ## Security Configuration
          - **Signing Disabled:** Development build (CI environment)
          
          EOF
          
          # Check if artifacts were created
          if [ -d "artifacts/${{ matrix.machine }}/${{ matrix.build_type }}" ]; then
            echo "## Artifacts Generated" >> build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md
            echo "✅ Build artifacts available for download" >> build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md
          else
            echo "## Artifacts" >> build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md
            echo "❌ No artifacts generated" >> build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md
          fi

      - name: Upload build report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ matrix.machine }}-${{ matrix.build_type }}
          path: build-report-${{ matrix.machine }}-${{ matrix.build_type }}.md
          retention-days: 90

  # Summary job that creates overall build status
  summary:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: always() && needs.setup.outputs.should_build == 'true'
    steps:
      - name: Generate build summary
        run: |
          echo "# KAS Build CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "## ✅ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "failure" ]; then
            echo "## ❌ Build Status: FAILURE" >> $GITHUB_STEP_SUMMARY
            echo "One or more builds failed. Check individual job logs for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Build Status: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix" >> $GITHUB_STEP_SUMMARY
          echo "Machines built: ${{ needs.setup.outputs.machines }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Build artifacts and reports are available in the workflow artifacts section." >> $GITHUB_STEP_SUMMARY

      - name: Update issue status
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Updating GitHub issue #14 with CI status"
          # This would update the issue, but requires GitHub token with appropriate permissions
          # For now, just log the intent
          echo "CI build completed with status: ${{ needs.build.result }}"
