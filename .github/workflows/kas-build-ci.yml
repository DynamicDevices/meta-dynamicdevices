name: KAS Build CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'recipes-**'
      - 'conf/**'
      - 'kas/**'
      - 'scripts/**'
      - 'classes/**'
      - 'meta-dynamicdevices-bsp/**'
      - 'meta-dynamicdevices-distro/**'
      - 'meta-lmp-base/**'
      - 'meta-dynamicdevices-bsp'
      - 'meta-dynamicdevices-distro'
      - 'meta-lmp-base'
      - '.github/workflows/kas-build-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'recipes-**'
      - 'conf/**'
      - 'kas/**'
      - 'scripts/**'
      - 'classes/**'
      - 'meta-dynamicdevices-bsp/**'
      - 'meta-dynamicdevices-distro/**'
      - 'meta-lmp-base/**'
      - 'meta-dynamicdevices-bsp'
      - 'meta-dynamicdevices-distro'
      - 'meta-lmp-base'
      - '.github/workflows/kas-build-ci.yml'
  workflow_dispatch:
    inputs:
      machine:
        description: 'Specific machine to build (optional)'
        required: false
        type: choice
        options:
          - 'all'
          - 'imx8mm-jaguar-sentai'
          - 'imx93-jaguar-eink'
        default: 'all'

jobs:
  # Layer validation job - runs once before builds
  validate:
    name: Validate Yocto Layer Compliance
    runs-on: self-hosted
    container:
      image: dynamicdevices/yocto-ci-build:latest
      options: --privileged --platform linux/amd64  -v /dev/net/tun:/dev/net/tun -v /dev/kvm:/dev/kvm
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache KAS layers
        uses: actions/cache@v4
        with:
          path: |
            build/layers
            build/cache
          key: kas-layers-${{ hashFiles('kas/lmp-dynamicdevices-base.yml') }}-${{ github.sha }}
          restore-keys: |
            kas-layers-${{ hashFiles('kas/lmp-dynamicdevices-base.yml') }}-
            kas-layers-

      - name: Cache Yocto downloads
        uses: actions/cache@v4
        with:
          path: ~/yocto/downloads
          key: yocto-downloads-${{ runner.os }}-${{ hashFiles('kas/lmp-dynamicdevices-base.yml') }}
          restore-keys: |
            yocto-downloads-${{ runner.os }}-

      - name: Validate Yocto Layers
        timeout-minutes: 15
        run: |
          echo "üèÖ Meta-DynamicDevices Layer Validation (CI)"
          echo "============================================="
          echo "üìã Using official yocto-check-layer for Yocto Project compliance"
          echo ""
          
          # Install KAS if not available
          if ! command -v kas >/dev/null 2>&1; then
            echo "üì¶ Installing KAS..."
            pip3 install kas
          fi
          
          # Create validation workspace
          VALIDATION_DIR="ci-layer-validation"
          rm -rf "$VALIDATION_DIR"
          mkdir -p "$VALIDATION_DIR"
          cd "$VALIDATION_DIR"
          
          echo "üîß Setting up KAS environment for layer validation..."
          
          # Copy KAS configuration for validation
          cp ../kas/layer-validation.yml .
          
          # Initialize KAS environment
          echo "üìã Initializing KAS build environment..."
          kas shell layer-validation.yml -c "echo 'KAS environment initialized'"
          
          echo "‚úÖ KAS environment ready"
          echo ""
          
          echo "üîç Starting comprehensive layer validation..."
          echo ""
          
          # Run yocto-check-layer validation
          echo "1Ô∏è‚É£ Validating all meta-dynamicdevices layers together..."
          
          if kas shell layer-validation.yml -c "
            # Use the yocto-check-layer script from openembedded-core
            YOCTO_CHECK_LAYER='./layers/openembedded-core/scripts/yocto-check-layer'
            
            if [ ! -f \"\$YOCTO_CHECK_LAYER\" ]; then
              echo '‚ùå yocto-check-layer script not found at expected location'
              exit 1
            fi
            
            echo '‚úÖ Found yocto-check-layer: '\$YOCTO_CHECK_LAYER
            
            # Clean up all potential conflicts from BitBake test data
            rm -rf layers/bitbake/lib/layerindexlib/tests/testdata/ 2>/dev/null || true
            find ../.. -name 'bitbake' -type d -exec rm -rf {}/lib/layerindexlib/tests/testdata/ 2>/dev/null \\; || true
            
            # Clean up any other build directories that might cause collection conflicts
            find ../.. -maxdepth 2 -name 'build*' -type d ! -path '*/ci-layer-validation/build' -exec echo 'üßπ Temporarily moving {}' \\; -exec mv {} {}.bak 2>/dev/null \\; || true
            
            # Run validation on all meta-dynamicdevices layers together to handle dependencies
            echo 'üîç Running yocto-check-layer validation...'
            python3 \"\$YOCTO_CHECK_LAYER\" \"$PWD/../meta-dynamicdevices-bsp\" \"$PWD/../meta-dynamicdevices-distro\" \"$PWD/..\"
            
            # Restore moved directories
            find ../.. -maxdepth 2 -name 'build*.bak' -type d -exec sh -c 'mv \"\$1\" \"\${1%.bak}\"' _ {} \\; 2>/dev/null || true
          "; then
            echo ""
            echo "‚úÖ meta-dynamicdevices layers validation PASSED"
            echo ""
            echo "============================================="
            echo "‚úÖ All layer validations PASSED"
            echo "‚úÖ All meta-dynamicdevices layers pass comprehensive yocto-check-layer validation!"
            echo "‚úÖ Layers are ready for Yocto Project compatibility."
            echo ""
          else
            echo ""
            echo "‚ùå meta-dynamicdevices layers validation FAILED"
            echo ""
            echo "============================================="
            echo "‚ùå Layer validation FAILED"
            echo ""
            echo "‚ÑπÔ∏è  Please fix the yocto-check-layer issues above before proceeding."
            echo "‚ÑπÔ∏è  Run './scripts/validate-layers-local.sh' locally to debug issues."
            echo ""
            exit 1
          fi
          
          # Cleanup validation workspace
          cd ..
          rm -rf "$VALIDATION_DIR"

  # Build job with matrix for specific machines and targets
  build:
    name: Build ${{ matrix.machine }} - ${{ matrix.target }}
    runs-on: self-hosted
    container:
      image: dynamicdevices/yocto-ci-build:latest
      options: --privileged --platform linux/amd64  -v /dev/net/tun:/dev/net/tun -v /dev/kvm:/dev/kvm
    needs: [validate]
    strategy:
      fail-fast: false
      matrix:
        machine: [imx8mm-jaguar-sentai, imx93-jaguar-eink]
        target: [lmp-factory-image, mfgtool-files]
    
    env:
      KAS_MACHINE: ${{ matrix.machine }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache KAS layers
        uses: actions/cache@v4
        with:
          path: |
            build/layers
            build/cache
          key: kas-layers-${{ hashFiles('kas/lmp-dynamicdevices-base.yml', 'kas/lmp-dynamicdevices-mfgtool.yml') }}-${{ github.sha }}
          restore-keys: |
            kas-layers-${{ hashFiles('kas/lmp-dynamicdevices-base.yml', 'kas/lmp-dynamicdevices-mfgtool.yml') }}-
            kas-layers-

      - name: Cache Yocto downloads
        uses: actions/cache@v4
        with:
          path: ~/yocto/downloads
          key: yocto-downloads-${{ runner.os }}-${{ hashFiles('kas/lmp-dynamicdevices-base.yml', 'kas/lmp-dynamicdevices-mfgtool.yml') }}
          restore-keys: |
            yocto-downloads-${{ runner.os }}-

      - name: Cache Yocto sstate
        uses: actions/cache@v4
        with:
          path: ~/yocto/sstate
          key: yocto-sstate-${{ runner.os }}-${{ matrix.machine }}-${{ matrix.target }}-${{ hashFiles('kas/lmp-dynamicdevices-base.yml', 'kas/lmp-dynamicdevices-mfgtool.yml') }}-${{ hashFiles('recipes-**') }}
          restore-keys: |
            yocto-sstate-${{ runner.os }}-${{ matrix.machine }}-${{ matrix.target }}-${{ hashFiles('kas/lmp-dynamicdevices-base.yml', 'kas/lmp-dynamicdevices-mfgtool.yml') }}-
            yocto-sstate-${{ runner.os }}-${{ matrix.machine }}-${{ matrix.target }}-
            yocto-sstate-${{ runner.os }}-${{ matrix.machine }}-
            yocto-sstate-${{ runner.os }}-

      - name: Cache build tmp directory
        uses: actions/cache@v4
        with:
          path: |
            ~/yocto/persistent
            build/tmp/cache
          key: yocto-build-cache-${{ runner.os }}-${{ matrix.machine }}-${{ matrix.target }}-${{ hashFiles('recipes-**') }}
          restore-keys: |
            yocto-build-cache-${{ runner.os }}-${{ matrix.machine }}-${{ matrix.target }}-
            yocto-build-cache-${{ runner.os }}-${{ matrix.machine }}-
            yocto-build-cache-${{ runner.os }}-

      - name: Setup build cache
        run: |
          echo "üóÑÔ∏è Setting up persistent build cache"
          mkdir -p ~/yocto/{downloads,sstate,persistent}
          chmod 755 ~/yocto/{downloads,sstate,persistent}

      - name: Build with KAS
        timeout-minutes: 360
        run: |
          echo "üî® Starting KAS build: ${{ matrix.machine }} (${{ matrix.target }})"
          
          # Select appropriate KAS configuration and build target
          if [ "${{ matrix.target }}" = "mfgtool-files" ]; then
            kas_config="kas/lmp-dynamicdevices-mfgtool.yml"
            build_target="mfgtool-files"
          else
            kas_config="kas/lmp-dynamicdevices-base.yml" 
            build_target="lmp-factory-image"
          fi
          
          echo "Using KAS config: $kas_config"
          echo "Build target: $build_target"
          echo "Machine: $KAS_MACHINE"
          
          # Run KAS build (directly in container)
          kas build "$kas_config:$build_target"
          
          echo "‚úÖ Build completed successfully"

      - name: Collect build artifacts
        if: always()
        run: |
          echo "üì¶ Collecting build artifacts for ${{ matrix.machine }} (${{ matrix.target }})"
          
          # Create artifacts directory
          mkdir -p artifacts/${{ matrix.machine }}/${{ matrix.target }}
          
          # Find the deploy directory
          deploy_dir=$(find . -path "*/tmp*/deploy/images/${{ matrix.machine }}" -type d | head -1)
          
          if [ -d "$deploy_dir" ]; then
            echo "‚úÖ Found deploy directory: $deploy_dir"
            
            # Copy key artifacts based on target
            if [ "${{ matrix.target }}" = "lmp-factory-image" ]; then
              # Factory image artifacts
              for pattern in "*.wic.gz" "*.wic.bmap" "imx-boot-*" "u-boot-*.itb"; do
                find "$deploy_dir" -name "$pattern" -exec cp {} artifacts/${{ matrix.machine }}/${{ matrix.target }}/ \; 2>/dev/null || true
              done
            else
              # MFGtool artifacts  
              for pattern in "imx-boot-mfgtool*" "u-boot-mfgtool*"; do
                find "$deploy_dir" -name "$pattern" -exec cp {} artifacts/${{ matrix.machine }}/${{ matrix.target }}/ \; 2>/dev/null || true
              done
            fi
            
            echo "üìã Artifacts collected:"
            ls -la artifacts/${{ matrix.machine }}/${{ matrix.target }}/
          else
            echo "‚ùå Deploy directory not found"
            echo "# Build Failed" > artifacts/${{ matrix.machine }}/${{ matrix.target }}/build-failed.txt
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.machine }}-${{ matrix.target }}
          path: artifacts/
          retention-days: 30
          if-no-files-found: warn

  # Summary job
  summary:
    name: Build Summary
    runs-on: self-hosted
    needs: [validate, build]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "# KAS Build CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [ "${{ needs.validate.result }}" = "success" ] && [ "${{ needs.build.result }}" = "success" ]; then
            echo "## ‚úÖ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All layer validations and builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- Layer validation: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Machines:** imx8mm-jaguar-sentai, imx93-jaguar-eink" >> $GITHUB_STEP_SUMMARY
          echo "- **Targets:** lmp-factory-image, mfgtool-files" >> $GITHUB_STEP_SUMMARY
          echo "- **Total builds:** 4 (2 machines √ó 2 targets)" >> $GITHUB_STEP_SUMMARY